# import matlab.engine
# eng = matlab.engine.start_matlab()
# #X, Y
# out = eng.callMatGaze('test.jpg', 0.6, 0.2679, nargout=2)
# print out

# from getMat import calcTurnAngle

# calcTurnAngle('test.jpg', 0.6, 0.2679, 545, 388)
# calcTurnAngle('faceimage.png', 0.69375, 0.65, 165, 296)
# print 'from test'


# def calcTurnAngle(image_path, x_in_p, y_in_p, x_out, y_out):

import numpy as np
import cv2
import math

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# #dimensions
# height = 240
# width = 320
#
# #Input
# x_in = 50
# y_in = 50
#
# #input precentage
# x_in_p = float(x_in/width)
# y_in_p = float(y_in/height)
#
# #output
# # y_out = 388
# # x_out = 545
# # x_out = 1800
#
# # print 'output X:',x_out, ' Y:',y_out
#
# #centers
# x_c = float(width/2)
# y_c = float(height/2)
# # print 'center X:',x_c, ' Y:',y_c
#
# #length calc 1
# x_1 = abs(x_c - x_in)
# y_1 = abs(y_c - y_in)
# # print 'x_1:',x_1, ' y_1:',y_1
# L_1 = math.sqrt((x_1**2)+(y_1**2))
# # print 'L1:',L_1
#
# #angle 1
# ang_1 = math.acos(x_1/L_1)
# # print 'angle 1:',ang_1
#
# #length calc 2
# x_2 = abs(x_c - x_out)
# y_2 = abs(y_c - y_out)
# # print 'x_2:',x_2, ' y_2:',y_2
# L_2 = math.sqrt((x_2**2)+(y_2**2))
# # print 'L2:',L_2
#
# #angle 2
# ang_2 = math.acos(x_2/L_2)
# # print 'angle 2:',ang_2
#
# #turn angle
# turn_angle = float((math.pi - ang_1 - ang_2)/2.0)
#
# #get turn getDirection
# output_angle = 0
# print 'test dir:',(x_out-x_in)
# if (x_out-x_in)>0:
#     output_angle = turn_angle
#     print '\nTurn Left'
#     print 'turn angle:',output_angle
# else:
#     output_angle = (turn_angle*-1)
#     print '\nTurn Right'
#     print 'turn angle:',output_angle

#draw the graph
# plt.imshow(img)
# x1, y1 = [x_in, x_out], [y_in, y_out]
# plt.plot(x1, y1, marker = 'o')
# plt.show()
# plt.savefig('foo.png')

# return output_angle


# data = [[1,3],[4,5]]
data = [[0.5, 0.5], [0.8528602957725525, 0.1471397042274475], [0.6764301478862762, 0.3235698521137238], [0.5001989960670471, 0.4998010039329529], [0.6176864306131998, 0.3823135693868001],
[0.33004410266876216, 0.6699558973312378], [0.5457758486270905, 0.4542241513729095], [0.3000049591064453, 0.6999950408935547], [0.4966216707229615, 0.5033783292770385], [0.8163844466209411, 0.18361555337905888],
[0.5499154667059581, 0.4500845332940419], [0.549915466705958, 0.4500845332940419], [0.8184294462203979, 0.18157055377960207], [0.5857173306412167, 0.41428266935878333], [0.3508695483207702, 0.6491304516792298],
[0.5580881797799876, 0.4419118202200123], [0.6452139496803284, 0.3547860503196716], [0.5672593134537077, 0.4327406865462922], [0.0, 1.0], [0.513234616934307, 0.48676538306569295],
[0.2978825569152832, 0.7021174430847168], [0.4945083508456963, 0.5054916491543038], [0.4945083508456963, 0.5054916491543038], [0.848530399799347, 0.15146960020065303], [0.5217408161498234, 0.47825918385017674],
[0.3505353450775146, 0.6494646549224854], [0.5095118539303727, 0.49048814606962743], [0.31422790288925173, 0.6857720971107483], [0.4964929238609646, 0.5035070761390354], [0.31296966075897215, 0.6870303392410279], [0.48502271991709006, 0.51497728008291], [0.3044146418571472, 0.6955853581428528], [0.47439871532532873, 0.5256012846746714], [0.3060131072998047, 0.6939868927001953], [0.46504395932391074, 0.5349560406760894], [0.4596252918243408, 0.5403747081756591],
[0.4647587662976176, 0.5352412337023825], [0.2971961379051209, 0.7028038620948791], [0.4563806348779928, 0.5436193651220073], [0.3002349972724915, 0.6997650027275085], [0.44894512832534983, 0.5510548716746503],
[0.6626196265220642, 0.3373803734779358], [0.4586576055161096, 0.5413423944838904], [0.4586576055161096, 0.5413423944838904], [0.46960035562515257, 0.5303996443748474], [0.45912325445692004, 0.5408767455430801], [0.3406882047653198, 0.6593117952346802], [0.4542891707960384, 0.5457108292039616], [0.3098138332366943, 0.6901861667633057], [0.44862347128390734, 0.5513765287160928], [0.7958476424217225, 0.20415235757827754], [0.4617262701947683, 0.5382737298052318], [1.0, 0.0], [0.481299860369504, 0.5187001396304961], [0.7435496687889099, 0.25645033121109007], [0.49050160803334275, 0.5094983919666572], [0.0, 1.0], [0.4738744348796701, 0.5261255651203299], [0.3044746518135071, 0.6955253481864929],
[0.4683203436315992, 0.5316796563684009], [0.0, 1.0], [0.45345303113535795, 0.546546968864642], [0.0, 1.0], [0.439500630177347, 0.5604993698226531], [0.4395006301773469, 0.560499369822653],
[0.34188830852508545, 0.6581116914749146], [0.43662967954051574, 0.5633703204594843], [0.35484981536865234, 0.6451501846313477],
[0.43429311199274817, 0.5657068880072518], [0.8468786954879761, 0.15312130451202388], [0.4457538226453934, 0.5542461773546067], [0.32411190271377566, 0.6758880972862243],
[0.44246620318778207, 0.557533796812218], [0.30280406475067134, 0.6971959352493287], [0.4387908837552266, 0.5612091162447734], [0.854501748085022, 0.145498251914978], [0.4494501366867598, 0.5505498633132403],
[0.30113475322723393, 0.6988652467727661], [0.4457422521002716, 0.5542577478997285], [0.7384747505187989, 0.26152524948120115], [0.4528820691348698, 0.5471179308651303],
[0.30763729810714724, 0.6923627018928528], [0.44942386030087633, 0.5505761396991238], [0.41990705728530886, 0.5800929427146911], [0.44873742302144454, 0.5512625769785555]]

# data = [[0.4395006301773469, 0.560499369822653], [0.34188830852508545, 0.6581116914749146], [0.43662967954051574, 0.5633703204594843], [0.35484981536865234, 0.6451501846313477], [0.43429311199274817, 0.5657068880072518], [0.8468786954879761, 0.15312130451202388], [0.4457538226453934, 0.5542461773546067], [0.32411190271377566, 0.6758880972862243], [0.44246620318778207, 0.557533796812218], [0.30280406475067134, 0.6971959352493287], [0.4387908837552266, 0.5612091162447734], [0.854501748085022, 0.145498251914978], [0.4494501366867598, 0.5505498633132403], [0.30113475322723393, 0.6988652467727661], [0.4457422521002716, 0.5542577478997285], [0.7384747505187989, 0.26152524948120115], [0.4528820691348698, 0.5471179308651303], [0.30763729810714724, 0.6923627018928528], [0.44942386030087633, 0.5505761396991238], [0.41990705728530886, 0.5800929427146911], [0.44873742302144454, 0.5512625769785555]]
# policy_values: [38.59141837984423, 47.40858162015578]
rdata = []
gdata = []
for [val1, val2] in data:
    print val1, val2
    rdata.append(val1)
    gdata.append(val2)
# line_up, = plt.plot([1,2,3], label='Line 2')
leg1, = plt.plot(rdata, label='Random')
leg2, = plt.plot(gdata, label='Gaze')
plt.legend(handles=[leg1, leg2])

# plt.legend(handles=leg)
plt.xlabel("Epochs")
plt.title("Nao Strategy Selection Learning")
# plt.xlim([0, epochs])
plt.ylabel("Probability")
# plt.ylim([0, 1])
plt.show()
